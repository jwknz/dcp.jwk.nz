{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Daily Coding Problems Everyday I get an email send to me with a coding problem. This site serves as my record of solving them. Each project (in the left column) describes the problem and links to my solution.","title":"Home"},{"location":"project-01/","text":"Problem 1 - Received on 03/04/2019 Problem asked by Google. Difficulty Level: Easy Question Given a list of numbers and a number k, return whether any two numbers from the list add up to k. For example, given [10, 15, 3, 7] and k of 17, return true since 10 + 7 is 17. Bonus: Can you do this in one pass? Answer let n1 = [ 10 , 15 , 3 , 7 ] let k = 17 document . querySelector ( #app ). innerHTML = n1 . filter (( nm , i ) = n1 . map ( n2 = ( k === n2 + nm ) ? TRUE : null ). join ( ) ). length 0 View result View Answer on Github","title":"Problem 1 - Received on 03/04/2019"},{"location":"project-01/#problem_1_-_received_on_03042019","text":"","title":"Problem 1 - Received on 03/04/2019"},{"location":"project-01/#problem_asked_by_google","text":"","title":"Problem asked by Google."},{"location":"project-01/#difficulty_level_easy","text":"Question Given a list of numbers and a number k, return whether any two numbers from the list add up to k. For example, given [10, 15, 3, 7] and k of 17, return true since 10 + 7 is 17. Bonus: Can you do this in one pass? Answer let n1 = [ 10 , 15 , 3 , 7 ] let k = 17 document . querySelector ( #app ). innerHTML = n1 . filter (( nm , i ) = n1 . map ( n2 = ( k === n2 + nm ) ? TRUE : null ). join ( ) ). length 0 View result View Answer on Github","title":"Difficulty Level: Easy"},{"location":"project-02/","text":"Problem 2 - Received on 04/04/2019 Problem asked by Uber. Difficulty Level: Hard Question Given an array of integers, return a new array such that each element at index i of the new array is the product of all the numbers in the original array except the one at i. For example, if our input was [1, 2, 3, 4, 5], the expected output would be [120, 60, 40, 30, 24]. If our input was [3, 2, 1], the expected output would be [2, 3, 6]. Follow-up: what if you can't use division? Answer let numbers = [3, 2, 1] let removeIndex = [] let answers = [] numbers.map(nm = { removeIndex.push(numbers.filter(n = { return (nm !== n) })) }) answers.push(removeIndex.map(x = { let t = 1; x.map(y = t *= y) return t })) document.querySelector( #app ).innerHTML = answers View result View Answer on Github","title":"Problem 2 - Received on 04/04/2019"},{"location":"project-02/#problem_2_-_received_on_04042019","text":"","title":"Problem 2 - Received on 04/04/2019"},{"location":"project-02/#problem_asked_by_uber","text":"","title":"Problem asked by Uber."},{"location":"project-02/#difficulty_level_hard","text":"Question Given an array of integers, return a new array such that each element at index i of the new array is the product of all the numbers in the original array except the one at i. For example, if our input was [1, 2, 3, 4, 5], the expected output would be [120, 60, 40, 30, 24]. If our input was [3, 2, 1], the expected output would be [2, 3, 6]. Follow-up: what if you can't use division? Answer let numbers = [3, 2, 1] let removeIndex = [] let answers = [] numbers.map(nm = { removeIndex.push(numbers.filter(n = { return (nm !== n) })) }) answers.push(removeIndex.map(x = { let t = 1; x.map(y = t *= y) return t })) document.querySelector( #app ).innerHTML = answers View result View Answer on Github","title":"Difficulty Level: Hard"},{"location":"project-04/","text":"Problem 4 - Received on 06/04/2019 Problem asked by Stripe. Difficulty Level: Hard Question Given an array of integers, find the first missing positive integer in linear time and constant space. In other words, find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well. For example, the input [3, 4, -1, 1] should give 2. The input [1, 2, 0] should give 3. Answer let numbers = [3, 4, -1, 1] // also in the question is [1, 2, 0] numbers.sort() let positiveNumbers = numbers.filter(n = n 0) let firstMissingPositiveNumber = positiveNumbers.filter((cn, ci) = cn + 1 !== positiveNumbers[ci + 1])[0] + 1 document.querySelector( #app ).innerHTML = firstMissingPositiveNumber View result View Answer on Github","title":"Problem 4 - Received on 06/04/2019"},{"location":"project-04/#problem_4_-_received_on_06042019","text":"","title":"Problem 4 - Received on 06/04/2019"},{"location":"project-04/#problem_asked_by_stripe","text":"","title":"Problem asked by Stripe."},{"location":"project-04/#difficulty_level_hard","text":"Question Given an array of integers, find the first missing positive integer in linear time and constant space. In other words, find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well. For example, the input [3, 4, -1, 1] should give 2. The input [1, 2, 0] should give 3. Answer let numbers = [3, 4, -1, 1] // also in the question is [1, 2, 0] numbers.sort() let positiveNumbers = numbers.filter(n = n 0) let firstMissingPositiveNumber = positiveNumbers.filter((cn, ci) = cn + 1 !== positiveNumbers[ci + 1])[0] + 1 document.querySelector( #app ).innerHTML = firstMissingPositiveNumber View result View Answer on Github","title":"Difficulty Level: Hard"},{"location":"project-09/","text":"Problem 9 - Received on 11/04/2019 Problem asked by Airbnb. Difficulty Level: Hard Question Given a list of integers, write a function that returns the largest sum of non-adjacent numbers. Numbers can be 0 or negative. For example, [2, 4, 6, 2, 5] should return 13, since we pick 2, 6, and 5. [5, 1, 1, 5] should return 10, since we pick 5 and 5. Answer let givenNumbers = [2, 4, 6, 2, 5] //let givenNumbers = [5, 1, 1, 5] let getNonAdjacentTotal = (gn) = { // Create a center number if there isn t one (gn.length % 2 !== 0) ? gn[((gn.length + 1) / 2) - 1] : gn[gn.splice(gn.length / 2,0,0)] //Testing to see what the center number //let centerNumber = gn[Math.floor(gn.length / 2)] //Add all the numbers at an even index - arrays start at 0 index let total = null gn.map((n, i) = (i % 2 === 0) ? total += n : null) return total } document.querySelector( #app ).innerHTML = getNonAdjacentTotal(givenNumbers) View result View Answer on Github","title":"Problem 9 - Received on 11/04/2019"},{"location":"project-09/#problem_9_-_received_on_11042019","text":"","title":"Problem 9 - Received on 11/04/2019"},{"location":"project-09/#problem_asked_by_airbnb","text":"","title":"Problem asked by Airbnb."},{"location":"project-09/#difficulty_level_hard","text":"Question Given a list of integers, write a function that returns the largest sum of non-adjacent numbers. Numbers can be 0 or negative. For example, [2, 4, 6, 2, 5] should return 13, since we pick 2, 6, and 5. [5, 1, 1, 5] should return 10, since we pick 5 and 5. Answer let givenNumbers = [2, 4, 6, 2, 5] //let givenNumbers = [5, 1, 1, 5] let getNonAdjacentTotal = (gn) = { // Create a center number if there isn t one (gn.length % 2 !== 0) ? gn[((gn.length + 1) / 2) - 1] : gn[gn.splice(gn.length / 2,0,0)] //Testing to see what the center number //let centerNumber = gn[Math.floor(gn.length / 2)] //Add all the numbers at an even index - arrays start at 0 index let total = null gn.map((n, i) = (i % 2 === 0) ? total += n : null) return total } document.querySelector( #app ).innerHTML = getNonAdjacentTotal(givenNumbers) View result View Answer on Github","title":"Difficulty Level: Hard"},{"location":"project-10/","text":"Problem 9 - Received on 11/04/2019 Problem asked by Apple. Difficulty Level: Medium Question Implement a job scheduler which takes in a function f and an integer n, and calls f after n milliseconds. Answer let showAlert = () = { document.querySelector( #app ).innerHTML = `Job Function!` } let JobScheduler = (f, n) = { setTimeout(f, n); // called after a certain time //setInterval(f, n) // repeat every time n milliseconds passes } JobScheduler(showAlert, 3000) View result View Answer on Github","title":"Problem 9 - Received on 11/04/2019"},{"location":"project-10/#problem_9_-_received_on_11042019","text":"","title":"Problem 9 - Received on 11/04/2019"},{"location":"project-10/#problem_asked_by_apple","text":"","title":"Problem asked by Apple."},{"location":"project-10/#difficulty_level_medium","text":"Question Implement a job scheduler which takes in a function f and an integer n, and calls f after n milliseconds. Answer let showAlert = () = { document.querySelector( #app ).innerHTML = `Job Function!` } let JobScheduler = (f, n) = { setTimeout(f, n); // called after a certain time //setInterval(f, n) // repeat every time n milliseconds passes } JobScheduler(showAlert, 3000) View result View Answer on Github","title":"Difficulty Level: Medium"}]}